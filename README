The Fancy Programming Language
(C) 2010 Christopher Bertels <chris@fancy-lang.org>
http://www.fancy-lang.org

----------------------------------------------------------------------

Fancy is a dynamic, object-oriented programming language heavily
inspired by Smalltalk, Ruby and Erlang. It will support dynamic code
evaluation (as in Ruby & Smalltalk), concurrency via the actor-model
and many more features yet to be implemented.

----------------------------------------------------------------------

Itâ€™s still in development, the implementation consisting of an
interpreter written in C++.

For some example code (that can be successfully executed), have a look
at the examples/ directory.

There's also lots of test coverage code. Have a look at the tests/
directory for these. The tests are written in FancySpec, a simple
testing library (somewhat similar to Ruby's RSpec). FancySpec's
implementation can be viewed in lib/fancy_spec.fnc.

----------------------------------------------------------------------

Compiling / Installing from source:
------------------------------------

Dependencies:
------------------------

- libgc ( Fancy uses BoehmGC for garbage collection ). 
- GNU Autotools: autoconf, automake and libtool.
- GNU Make.
- GNU Bison ( version 2.4 and higher otherwise you will get a Segmentation fault ).
- GNU Flex.

NOTE: BoehmGC - It's included in the vendor/gc directory
           but you can also get it here:
           http://www.hpl.hp.com/personal/Hans_Boehm/gc/.
 
Given the tools & libraries mentioned above, Fancy _should_ build without problems 
on most *nix systems. We successfully have built Fancy on Debian & Ubuntu, OpenSuSE 
and Mac OS X 10.5 and 10.6.

Standard building procedure:  
------------------------

Building Fancy is just that easy:
  
  $ cd <fancy_source_path>
  $ ./configure 
  $ make && make test

NOTE: if you have problems with ./configure script or make utility just try:

  $ autoreconf --install --force

and try again.

----------------------------
Some technical information:
----------------------------


What's already working?
------------------------

  - Class definitions
    (including nested classes that work like modules / namespaces)
  - Instance & class method definitions
  - String, Integer, Float, Array, Hash (HashMap) & Block literals
  - Method & Operator calls
  - Instance & class variable access
  - Dynamic getter and setter method definitions (similar to Ruby's attr_acessor)
  - Loops
  - Support for closures (it works but there's definately room for
    performance improvements)
  - File reading and writing
  - Class-Mixins (including methods of one class into another)
  - Exception handling


What's still missing?
----------------------

  - Pattern matching
  - Concurrency stuff (Actor-model based concurrency, Futures etc)
  - Some more advanced stuff, e.g. runtime inspection of method calls
    via MethodContext etc. (saved for later)
  - Rubinius VM bytecode compiler


How is it implemented?
-----------------------

  - Currently, theres a quite simple interpreter written in
    non-idiomatic C++.
    Sorry, I'm not a big C++ programmer. It should be fairly easy to
    read though.

  - It uses the BoehmGC for garbage collection.

  - The lexer & parser are built with GNU Flex & GNU Bison.

  - I'm planning to add a bytecode compiler, written in the language
    itself. Right now there's an experimental fancy-written compiler
    that emits Ruby code to be run on the Rubinius VM. It's not fully
    finished yet (some built-in classes & methods still need to be
    implemented) but will be soon.

----------------------------------------------------------------------

Copyright:
-----------

vendor/gc: GC Copyright 1988, 1989 Hans-J. Boehm, Alan J. Demers
           For more information see the vendor/gc directory.


Fancy is licensed under the terms of the GNU LGPL v3. For more
information on licensing issues have a look at the LICENSE file.