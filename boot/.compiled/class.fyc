!RBIX
8876994460201244843
x
M
1
n
n
x
10
__script__
i
29
99
7
0
1
65
49
1
3
13
99
12
7
2
12
7
3
12
65
12
49
4
4
15
49
2
0
15
2
11
I
6
I
0
I
0
I
0
n
p
5
x
5
Class
x
10
open_class
x
14
__class_init__
M
1
n
n
x
5
Class
i
139
5
66
7
0
64
15
5
49
1
0
15
99
7
2
7
3
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
6
7
7
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
8
7
9
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
10
7
11
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
12
7
13
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
14
7
15
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
16
7
17
65
67
49
4
0
49
5
4
11
I
5
I
0
I
0
I
0
n
p
18
s
179
""
  This class is the class of @Class@ objects - e.g. @Object@, @Array@,
  @String@ etc.
  Any class in the language is an instance of this class, as in Ruby
  or Smalltalk.
  ""
x
6
public
x
19
define_slot_reader:
M
1
n
n
x
19
define_slot_reader:
i
14
7
0
64
15
5
20
0
56
1
47
49
2
2
11
I
4
I
1
I
1
I
1
n
p
3
s
249
""
    @slotname Name of the slot to define a getter method for.

    Defines a slot reader method with a given name.
    E.g. for a slotname @count it will define the following method:
        def count {
          get_slot: 'count
        }
    ""
M
1
p
2
x
9
for_block
t
n
x
19
define_slot_reader:
i
9
5
21
1
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
9
get_slot:
p
7
I
0
I
16
I
1
I
15
I
4
I
16
I
9
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
0
x
19
define_method:with:
p
15
I
0
I
17
I
0
I
13
I
0
I
12
I
4
I
17
I
5
I
14
I
7
I
16
I
9
I
17
I
e
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
8
slotname
x
17
method_visibility
x
15
add_defn_method
x
19
define_slot_writer:
M
1
n
n
x
19
define_slot_writer:
i
23
7
0
64
15
5
20
0
49
1
0
7
2
64
49
3
1
56
4
47
49
5
2
11
I
4
I
1
I
1
I
1
n
p
6
s
268
""
    @slotname Name of the slot to defnie define a setter method for.

    Defines a slot writer method with a given name.
    E.g. for a slotname @count it will define the following method:
        def count: c {
          set_slot: 'count value: c
        }
    ""
x
5
:to_s
s
1
:
x
2
:+
M
1
p
2
x
9
for_block
t
n
x
19
define_slot_writer:
i
15
57
19
0
15
5
21
1
0
20
0
47
49
0
2
11
I
5
I
1
I
1
I
1
n
p
1
x
15
set_slot:value:
p
7
I
0
I
26
I
5
I
25
I
a
I
26
I
f
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
3
val
x
19
define_method:with:
p
15
I
0
I
27
I
0
I
23
I
0
I
22
I
4
I
27
I
5
I
24
I
10
I
26
I
12
I
27
I
17
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
8
slotname
x
11
read_slots:
M
1
n
n
x
11
read_slots:
i
12
7
0
64
15
20
0
56
1
49
2
1
11
I
3
I
1
I
1
I
1
n
p
3
s
129
""
    @slots @Array@ of slotnames to define getter methods for.

    Defines slot reader methods for all given slotnames.
    ""
M
1
p
2
x
9
for_block
t
n
x
11
read_slots:
i
12
57
19
0
15
5
20
0
47
49
0
1
11
I
4
I
1
I
1
I
1
n
p
1
x
19
define_slot_reader:
p
7
I
0
I
32
I
5
I
31
I
7
I
32
I
c
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
1
s
x
5
each:
p
13
I
0
I
33
I
0
I
2f
I
0
I
2e
I
4
I
30
I
6
I
32
I
8
I
33
I
c
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
5
slots
x
12
write_slots:
M
1
n
n
x
12
write_slots:
i
12
7
0
64
15
20
0
56
1
49
2
1
11
I
3
I
1
I
1
I
1
n
p
3
s
129
""
    @slots @Array@ of slotnames to define setter methods for.

    Defines slot writer methods for all given slotnames.
    ""
M
1
p
2
x
9
for_block
t
n
x
12
write_slots:
i
12
57
19
0
15
5
20
0
47
49
0
1
11
I
4
I
1
I
1
I
1
n
p
1
x
19
define_slot_writer:
p
7
I
0
I
3e
I
5
I
3d
I
7
I
3e
I
c
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
1
s
x
5
each:
p
13
I
0
I
3f
I
0
I
3b
I
0
I
3a
I
4
I
3c
I
6
I
3e
I
8
I
3f
I
c
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
5
slots
x
17
read_write_slots:
M
1
n
n
x
17
read_write_slots:
i
12
7
0
64
15
20
0
56
1
49
2
1
11
I
3
I
1
I
1
I
1
n
p
3
s
147
""
    @slots @Array@ of slotnames to define getter & setter methods for.

    Defines slot reader & writer methods for all given slotnames.
    ""
M
1
p
2
x
9
for_block
t
n
x
17
read_write_slots:
i
20
57
19
0
15
5
20
0
47
49
0
1
15
5
20
0
47
49
1
1
11
I
4
I
1
I
1
I
1
n
p
2
x
19
define_slot_reader:
x
19
define_slot_writer:
p
15
I
0
I
4b
I
4
I
4a
I
5
I
49
I
7
I
4a
I
c
I
4b
I
d
I
4a
I
f
I
4b
I
14
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
1
s
x
5
each:
p
13
I
0
I
4c
I
0
I
47
I
0
I
46
I
4
I
48
I
6
I
4b
I
8
I
4c
I
c
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
5
slots
x
10
subclass?:
M
1
n
n
x
10
subclass?:
i
19
7
0
64
15
5
20
0
47
49
1
1
56
2
56
3
49
4
2
11
I
4
I
1
I
1
I
1
n
p
5
s
223
""
    @class_obj Class object to check for, if @self is a subclass of @class_obj.
    @return @true, if @self is a subclass of @class_obj, @false otherwise.

    Indicates, if a Class is a subclass of another Class.
    ""
x
3
:==
M
1
p
2
x
9
for_block
t
n
x
10
subclass?:
i
2
2
11
I
2
I
0
I
0
I
0
n
p
0
p
3
I
0
I
58
I
2
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
0
M
1
p
2
x
9
for_block
t
n
x
10
subclass?:
i
15
5
47
49
0
0
1
49
1
1
56
2
49
3
1
11
I
3
I
0
I
0
I
0
n
p
4
x
11
:superclass
x
3
:!=
M
1
p
2
x
9
for_block
t
n
x
10
subclass?:
i
12
5
47
49
0
0
21
2
0
49
1
1
11
I
3
I
0
I
0
I
0
n
p
2
x
11
:superclass
x
10
subclass?:
p
7
I
0
I
5c
I
0
I
5b
I
8
I
5c
I
c
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
0
x
8
if_true:
p
9
I
0
I
5d
I
0
I
5a
I
9
I
5c
I
b
I
5d
I
f
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
0
x
13
if_true:else:
p
15
I
0
I
5e
I
0
I
55
I
0
I
54
I
4
I
56
I
b
I
58
I
d
I
5d
I
f
I
5e
I
13
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
1
x
9
class_obj
x
17
alias_method:for:
M
1
n
n
x
17
alias_method:for:
i
14
7
0
64
15
5
20
0
20
1
47
49
1
2
11
I
5
I
2
I
2
I
2
n
p
2
s
214
""
    @new_method_name New method name to be used as an alias for @old_method_name.
    @old_method_name Name of method to alias (must exist in the @Class@).

    Defines an alias method for another method.
    ""
x
21
alias_method_rbx:for:
p
13
I
0
I
69
I
0
I
67
I
0
I
66
I
4
I
69
I
5
I
68
I
9
I
69
I
e
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
2
x
15
new_method_name
x
15
old_method_name
p
17
I
2
I
7
I
6
I
17
I
19
I
27
I
2c
I
33
I
3f
I
3f
I
52
I
4c
I
65
I
5e
I
78
I
69
I
8b
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
0
x
13
attach_method
p
5
I
0
I
6b
I
0
I
6a
I
1d
x
36
/more/vic/hk/fancy-lang/lib/class.fy
p
0
