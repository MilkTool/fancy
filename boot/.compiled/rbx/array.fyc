!RBIX
8876994460201244843
x
M
1
n
n
x
10
__script__
i
29
99
7
0
1
65
49
1
3
13
99
12
7
2
12
7
3
12
65
12
49
4
4
15
49
2
0
15
2
11
I
6
I
0
I
0
I
0
n
p
5
x
5
Array
x
10
open_class
x
14
__class_init__
M
1
n
n
x
5
Array
i
577
5
66
5
7
0
47
49
1
1
15
5
7
2
47
49
1
1
15
5
7
3
47
49
1
1
15
5
7
4
47
49
1
1
15
5
7
5
47
49
1
1
15
5
7
6
47
49
1
1
15
5
7
7
47
49
1
1
15
5
7
8
47
49
1
1
15
5
49
9
0
15
99
7
10
7
11
65
45
12
13
49
14
4
15
5
49
9
0
15
99
7
15
7
16
65
45
12
17
49
14
4
15
5
49
9
0
15
99
7
18
7
19
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
22
7
23
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
24
7
25
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
26
7
27
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
28
7
29
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
30
7
31
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
32
7
33
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
34
7
35
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
36
7
37
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
38
7
39
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
40
7
41
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
42
7
43
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
44
7
45
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
46
7
47
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
48
7
49
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
50
7
51
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
52
7
53
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
54
7
55
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
56
7
57
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
58
7
59
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
60
7
61
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
62
7
63
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
64
7
65
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
66
7
67
65
67
49
20
0
49
21
4
15
5
49
9
0
15
99
7
68
7
69
65
67
49
20
0
49
21
4
11
I
5
I
0
I
0
I
0
n
p
70
x
2
==
x
11
ruby_alias:
x
2
<<
x
5
clear
x
4
size
x
7
reverse
x
8
reverse!
x
4
sort
x
3
pop
x
6
public
x
9
new:with:
M
1
n
n
x
9
new:with:
i
11
45
0
1
20
0
20
1
49
2
2
11
I
5
I
2
I
2
I
2
n
p
3
x
5
Array
n
x
3
new
p
9
I
0
I
f
I
0
I
d
I
0
I
e
I
7
I
f
I
b
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
4
size
x
7
default
x
5
Array
n
x
13
attach_method
x
4
new:
M
1
n
n
x
4
new:
i
10
45
0
1
20
0
1
49
2
2
11
I
4
I
1
I
1
I
1
n
p
3
x
5
Array
n
x
9
new:with:
p
9
I
0
I
15
I
0
I
13
I
0
I
14
I
6
I
15
I
a
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
4
size
n
x
7
append:
M
1
n
n
x
7
append:
i
12
7
0
64
15
20
0
56
1
49
2
1
11
I
3
I
1
I
1
I
1
n
p
3
s
36
Appends another Array onto this one.
M
1
p
2
x
9
for_block
t
n
x
7
append:
i
12
57
19
0
15
5
20
0
47
49
0
1
11
I
4
I
1
I
1
I
1
n
p
1
x
3
:<<
p
5
I
0
I
1c
I
4
I
1b
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
1
x
x
5
each:
p
13
I
0
I
1d
I
0
I
19
I
0
I
18
I
4
I
1a
I
6
I
1c
I
8
I
1d
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
3
arr
x
17
method_visibility
x
15
add_defn_method
x
10
includes?:
M
1
n
n
x
10
includes?:
i
12
7
0
64
15
5
20
0
47
49
1
1
11
I
3
I
1
I
1
I
1
n
p
2
s
46
Indicates, if an Array includes a given value.
x
8
include?
p
11
I
0
I
23
I
0
I
21
I
0
I
20
I
4
I
22
I
7
I
23
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
3
obj
x
6
:clone
M
1
n
n
x
6
:clone
i
20
7
0
64
15
35
0
19
0
15
5
56
1
47
49
2
1
15
20
0
11
I
3
I
1
I
0
I
0
n
p
3
s
32
Clones (shallow copy) the Array.
M
1
p
2
x
9
for_block
t
n
x
6
:clone
i
13
57
19
0
15
21
1
0
20
0
49
0
1
11
I
4
I
1
I
1
I
1
n
p
1
x
3
:<<
p
5
I
0
I
2a
I
4
I
29
I
d
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
2c
I
0
I
27
I
0
I
26
I
4
I
27
I
9
I
2b
I
a
I
2a
I
c
I
2b
I
14
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
3
new
x
5
each:
M
1
n
n
x
5
each:
i
19
7
0
64
15
1
19
1
15
5
56
1
47
50
2
0
15
20
1
11
I
4
I
2
I
1
I
1
n
p
3
s
51
Calls a given Block with each element in the Array.
M
1
p
2
x
9
for_block
t
n
x
5
each:
i
18
57
19
0
15
21
1
0
20
0
35
1
49
0
1
22
1
1
11
I
4
I
1
I
1
I
1
n
p
1
x
5
call:
p
3
I
0
I
32
I
12
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
1
x
x
4
each
p
13
I
0
I
34
I
0
I
30
I
0
I
2f
I
4
I
31
I
8
I
32
I
10
I
33
I
13
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
5
block
x
3
val
x
10
remove_at:
M
1
n
n
x
10
remove_at:
i
22
7
0
64
15
20
0
45
1
2
49
3
1
56
4
56
5
49
6
2
15
1
11
I
4
I
1
I
1
I
1
n
p
7
s
219
""Removes an element at a given index.
     If given an Array of indices, removes all the elements with these indices.
     Returns the deleted object if an index was given, the last deleted object for an Array given.""
x
6
Fixnum
n
x
6
is_a?:
M
1
p
2
x
9
for_block
t
n
x
10
remove_at:
i
24
5
21
1
0
47
49
0
1
19
0
15
5
21
1
0
47
49
1
1
15
20
0
31
11
I
4
I
1
I
0
I
0
n
p
2
x
3
at:
x
9
delete_at
p
15
I
0
I
3f
I
0
I
3d
I
0
I
3c
I
4
I
3d
I
b
I
3e
I
c
I
3d
I
f
I
3e
I
18
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
7
deleted
M
1
p
2
x
9
for_block
t
n
x
10
remove_at:
i
15
21
1
0
45
0
1
49
2
1
56
3
49
4
1
11
I
3
I
0
I
0
I
0
n
p
5
x
5
Array
n
x
6
is_a?:
M
1
p
2
x
9
for_block
t
n
x
10
remove_at:
i
22
78
19
0
15
35
0
19
1
15
21
2
0
56
0
49
1
1
15
20
1
31
11
I
5
I
2
I
0
I
0
n
p
2
M
1
p
2
x
9
for_block
t
n
x
10
remove_at:
i
49
57
19
0
15
21
1
1
5
20
0
21
1
0
49
0
1
47
49
1
1
49
2
1
15
5
20
0
21
1
0
49
0
1
47
49
3
1
15
21
1
0
79
49
4
1
22
1
0
11
I
6
I
1
I
1
I
1
n
p
5
x
2
:-
x
3
at:
x
3
:<<
x
9
delete_at
x
2
:+
p
11
I
0
I
47
I
4
I
44
I
18
I
46
I
19
I
45
I
21
I
46
I
31
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
3
idx
x
5
each:
p
15
I
0
I
49
I
0
I
42
I
0
I
41
I
4
I
42
I
9
I
43
I
c
I
47
I
e
I
48
I
16
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
5
count
x
14
deleted_values
x
8
if_true:
p
9
I
0
I
4a
I
0
I
40
I
9
I
49
I
b
I
4a
I
f
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
13
if_true:else:
p
15
I
0
I
4c
I
0
I
3a
I
0
I
39
I
4
I
3b
I
c
I
3f
I
e
I
4a
I
10
I
4b
I
16
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
5
index
x
3
at:
M
1
n
n
x
3
at:
i
16
7
0
64
15
5
7
1
20
0
35
1
47
49
2
2
11
I
4
I
1
I
1
I
1
n
p
3
s
50
Returns the element in the Array at a given index.
x
2
[]
x
10
ruby:args:
p
13
I
0
I
52
I
0
I
50
I
0
I
4f
I
4
I
52
I
5
I
51
I
b
I
52
I
10
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
3
idx
x
7
at:put:
M
1
n
n
x
7
at:put:
i
18
7
0
64
15
5
7
1
20
0
20
1
35
2
47
49
2
2
11
I
6
I
2
I
2
I
2
n
p
3
s
64
Inserts a given object at a given index (position) in the Array.
x
3
[]=
x
10
ruby:args:
p
13
I
0
I
58
I
0
I
56
I
0
I
55
I
4
I
58
I
5
I
57
I
d
I
58
I
12
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
3
idx
x
3
obj
x
6
:first
M
1
n
n
x
6
:first
i
11
7
0
64
15
5
78
47
49
1
1
11
I
2
I
0
I
0
I
0
n
p
2
s
39
Returns the first element in the Array.
x
3
at:
p
13
I
0
I
5d
I
0
I
5c
I
0
I
5b
I
4
I
5d
I
5
I
5c
I
6
I
5d
I
b
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
7
:second
M
1
n
n
x
7
:second
i
11
7
0
64
15
5
79
47
49
1
1
11
I
2
I
0
I
0
I
0
n
p
2
s
39
Returns the second element in the Array
x
3
at:
p
13
I
0
I
62
I
0
I
61
I
0
I
60
I
4
I
62
I
5
I
61
I
6
I
62
I
b
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
6
:third
M
1
n
n
x
6
:third
i
11
7
0
64
15
5
80
47
49
1
1
11
I
2
I
0
I
0
I
0
n
p
2
s
38
Returns the third element in the Array
x
3
at:
p
13
I
0
I
67
I
0
I
66
I
0
I
65
I
4
I
67
I
5
I
66
I
6
I
67
I
b
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
7
:fourth
M
1
n
n
x
7
:fourth
i
12
7
0
64
15
5
4
3
47
49
1
1
11
I
2
I
0
I
0
I
0
n
p
2
s
39
Returns the fourth element in the Array
x
3
at:
p
13
I
0
I
6c
I
0
I
6b
I
0
I
6a
I
4
I
6c
I
5
I
6b
I
7
I
6c
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
16
each_with_index:
M
1
n
n
x
16
each_with_index:
i
16
7
0
64
15
78
19
1
15
5
56
1
47
49
2
1
11
I
4
I
2
I
1
I
1
n
p
3
s
88
Iterate over all elements in Array. Calls a given Block with each element and its index.
M
1
p
2
x
9
for_block
t
n
x
16
each_with_index:
i
29
57
19
0
15
21
1
0
20
0
21
1
1
35
2
49
0
1
15
21
1
1
79
49
1
1
22
1
1
11
I
5
I
1
I
1
I
1
n
p
2
x
5
call:
x
2
:+
p
7
I
0
I
75
I
4
I
73
I
e
I
74
I
1d
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
76
I
0
I
70
I
0
I
6f
I
4
I
71
I
8
I
76
I
9
I
75
I
b
I
76
I
10
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
5
block
x
1
i
x
6
index:
M
1
n
n
x
6
index:
i
12
7
0
64
15
5
20
0
47
49
1
1
11
I
3
I
1
I
1
I
1
n
p
2
s
64
Returns the index of an item (or nil, if it isn't in the Array).
x
5
index
p
13
I
0
I
7b
I
0
I
7a
I
0
I
79
I
4
I
7b
I
5
I
7a
I
7
I
7b
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
4
item
x
11
indices_of:
M
1
n
n
x
11
indices_of:
i
20
7
0
64
15
35
0
19
1
15
5
56
1
47
49
2
1
15
20
1
11
I
4
I
2
I
1
I
1
n
p
3
s
81
Returns an Array of all indices of this item. Empty Array if item does not occur.
M
1
p
2
x
9
for_block
t
n
x
11
indices_of:
i
24
58
37
19
0
15
37
19
1
15
15
21
1
0
20
0
49
0
1
56
1
49
2
1
11
I
5
I
2
I
2
I
2
n
p
3
x
3
:==
M
1
p
2
x
9
for_block
t
n
x
11
indices_of:
i
10
21
2
1
21
1
1
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
3
:<<
p
5
I
0
I
84
I
0
I
83
I
a
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
8
if_true:
p
9
I
0
I
85
I
a
I
82
I
12
I
84
I
14
I
85
I
18
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
3
obj
x
3
idx
x
16
each_with_index:
p
15
I
0
I
87
I
0
I
7f
I
0
I
7e
I
4
I
80
I
9
I
86
I
a
I
85
I
c
I
86
I
14
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
4
item
x
3
tmp
x
8
from:to:
M
1
n
n
x
8
from:to:
i
46
7
0
64
15
20
0
78
49
1
1
56
2
49
3
1
15
20
1
78
49
1
1
56
4
49
3
1
15
35
0
19
2
15
20
0
20
1
56
5
49
6
2
15
20
2
11
I
6
I
3
I
2
I
2
n
p
7
s
52
Returns sub-array starting at from: and going to to:
x
2
:<
M
1
p
2
x
9
for_block
t
n
x
8
from:to:
i
15
5
47
49
0
0
21
1
0
49
1
1
22
1
0
11
I
3
I
0
I
0
I
0
n
p
2
x
5
:size
x
2
:+
p
5
I
0
I
8e
I
0
I
8d
I
f
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
8
if_true:
M
1
p
2
x
9
for_block
t
n
x
8
from:to:
i
15
5
47
49
0
0
21
1
1
49
1
1
22
1
1
11
I
3
I
0
I
0
I
0
n
p
2
x
5
:size
x
2
:+
p
5
I
0
I
91
I
0
I
90
I
f
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
M
1
p
2
x
9
for_block
t
n
x
8
from:to:
i
18
57
19
0
15
21
1
2
5
20
0
47
49
0
1
49
1
1
11
I
5
I
1
I
1
I
1
n
p
2
x
3
at:
x
3
:<<
p
5
I
0
I
95
I
4
I
94
I
12
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
1
i
x
13
upto:do_each:
p
23
I
0
I
97
I
0
I
8b
I
0
I
8a
I
4
I
8c
I
a
I
8e
I
c
I
8f
I
16
I
91
I
18
I
92
I
21
I
93
I
25
I
95
I
27
I
96
I
2e
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
3
x
4
from
x
2
to
x
6
subarr
x
5
last:
M
1
n
n
x
5
last:
i
12
7
0
64
15
5
20
0
47
49
1
1
11
I
3
I
1
I
1
I
1
n
p
2
s
49
Returns new Array with last n elements specified.
x
4
last
p
13
I
0
I
9c
I
0
I
9b
I
0
I
9a
I
4
I
9c
I
5
I
9b
I
7
I
9c
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
5
count
x
5
any?:
M
1
n
n
x
5
any?:
i
12
7
0
64
15
5
20
0
47
50
1
0
11
I
3
I
1
I
1
I
1
n
p
2
s
63
Takes condition-block and returns true if any element meets it.
x
4
any?
p
13
I
0
I
a1
I
0
I
a0
I
0
I
9f
I
4
I
a1
I
5
I
a0
I
7
I
a1
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
5
block
x
5
all?:
M
1
n
n
x
5
all?:
i
12
7
0
64
15
5
20
0
47
50
1
0
11
I
3
I
1
I
1
I
1
n
p
2
s
63
Takes condition-block and returns true if all elements meet it.
x
4
all?
p
13
I
0
I
a6
I
0
I
a5
I
0
I
a4
I
4
I
a6
I
5
I
a5
I
7
I
a6
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
5
block
x
7
select:
M
1
n
n
x
7
select:
i
21
7
0
64
15
35
0
19
1
15
5
56
1
47
49
2
1
15
20
1
31
11
I
4
I
2
I
1
I
1
n
p
3
s
129
""
    Returns a new Array with all the elements in self that yield a
    true-ish value when called with the given Block.
    ""
M
1
p
2
x
9
for_block
t
n
x
7
select:
i
20
57
19
0
15
21
1
0
20
0
35
1
49
0
1
56
1
49
2
1
11
I
4
I
1
I
1
I
1
n
p
3
x
5
call:
M
1
p
2
x
9
for_block
t
n
x
7
select:
i
10
21
2
1
21
1
0
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
3
:<<
p
5
I
0
I
b2
I
0
I
b1
I
a
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
8
if_true:
p
9
I
0
I
b3
I
4
I
b0
I
e
I
b2
I
10
I
b3
I
14
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
b5
I
0
I
ad
I
0
I
ac
I
4
I
ae
I
9
I
b4
I
a
I
b3
I
c
I
b4
I
15
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
5
block
x
3
tmp
x
18
select_with_index:
M
1
n
n
x
18
select_with_index:
i
20
7
0
64
15
35
0
19
1
15
5
56
1
47
49
2
1
15
20
1
11
I
4
I
2
I
1
I
1
n
p
3
s
115
""
    Same as select, just gets also called with an additional argument
    for each element's index value.
    ""
M
1
p
2
x
9
for_block
t
n
x
18
select_with_index:
i
28
58
37
19
0
15
37
19
1
15
15
21
1
0
20
0
20
1
35
2
49
0
1
56
1
49
2
1
11
I
6
I
2
I
2
I
2
n
p
3
x
5
call:
M
1
p
2
x
9
for_block
t
n
x
18
select_with_index:
i
15
21
2
1
21
1
0
21
1
1
35
2
49
0
1
11
I
4
I
0
I
0
I
0
n
p
1
x
3
:<<
p
5
I
0
I
c1
I
0
I
c0
I
f
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
8
if_true:
p
9
I
0
I
c2
I
a
I
bf
I
16
I
c1
I
18
I
c2
I
1c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
3
obj
x
3
idx
x
16
each_with_index:
p
15
I
0
I
c4
I
0
I
bc
I
0
I
bb
I
4
I
bd
I
9
I
c3
I
a
I
c2
I
c
I
c3
I
14
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
5
block
x
3
tmp
x
7
reject:
M
1
n
n
x
7
reject:
i
12
7
0
64
15
5
20
0
47
50
1
0
11
I
3
I
1
I
1
I
1
n
p
2
s
118
""
    Returns a new Array with all the elements which yield nil or false
    when called with the given Block.
    ""
x
6
reject
p
13
I
0
I
cd
I
0
I
cb
I
0
I
ca
I
4
I
cd
I
5
I
cc
I
7
I
cd
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
5
block
x
8
reject!:
M
1
n
n
x
8
reject!:
i
15
7
0
64
15
5
20
0
47
50
1
0
15
5
31
11
I
3
I
1
I
1
I
1
n
p
2
s
58
Same as Array#reject: but doing so in-place (destructive).
x
7
reject!
p
13
I
0
I
d4
I
0
I
d1
I
0
I
d0
I
4
I
d3
I
5
I
d2
I
7
I
d3
I
f
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
5
block
x
5
join:
M
1
n
n
x
5
join:
i
12
7
0
64
15
5
20
0
47
49
1
1
11
I
3
I
1
I
1
I
1
n
p
2
s
99
""Joins all elements in the Array by a given String.
       E.g.: [1,2,3] join: ', ' # => '1,2,3'""
x
4
join
p
13
I
0
I
db
I
0
I
d9
I
0
I
d8
I
4
I
db
I
5
I
da
I
7
I
db
I
c
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
1
x
8
join_str
x
4
:sum
M
1
n
n
x
4
:sum
i
13
7
0
64
15
5
56
1
78
47
49
2
2
11
I
3
I
0
I
0
I
0
n
p
3
s
130
""
    Calculates the sum of all the elements in the Enumerable
    (assuming them to be Numbers (implementing '+' & '*')).
    ""
M
1
p
2
x
9
for_block
t
n
x
4
:sum
i
18
58
37
19
0
15
37
19
1
15
15
20
0
20
1
49
0
1
11
I
5
I
2
I
2
I
2
n
p
1
x
2
:+
p
3
I
0
I
e3
I
12
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
1
x
x
1
y
x
16
reduce:init_val:
p
13
I
0
I
e4
I
0
I
e2
I
0
I
e1
I
4
I
e4
I
5
I
e3
I
8
I
e4
I
d
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
8
:product
M
1
n
n
x
8
:product
i
13
7
0
64
15
5
56
1
79
47
49
2
2
11
I
3
I
0
I
0
I
0
n
p
3
s
126
""Calculates the product of all the elements in the Enumerable
      (assuming them to be Numbers (implementing '+' & '*')).""
M
1
p
2
x
9
for_block
t
n
x
8
:product
i
18
58
37
19
0
15
37
19
1
15
15
20
0
20
1
49
0
1
11
I
5
I
2
I
2
I
2
n
p
1
x
2
:*
p
3
I
0
I
ea
I
12
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
2
x
1
x
x
1
y
x
16
reduce:init_val:
p
13
I
0
I
eb
I
0
I
e9
I
0
I
e8
I
4
I
eb
I
5
I
ea
I
8
I
eb
I
d
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
p
107
I
2
I
3
I
3
I
2
I
5
I
3
I
a
I
4
I
b
I
3
I
d
I
4
I
12
I
5
I
13
I
4
I
15
I
5
I
1a
I
6
I
1b
I
5
I
1d
I
6
I
22
I
7
I
23
I
6
I
25
I
7
I
2a
I
8
I
2b
I
7
I
2d
I
8
I
32
I
9
I
33
I
8
I
35
I
9
I
3a
I
a
I
3b
I
9
I
3d
I
a
I
42
I
f
I
4d
I
b
I
54
I
15
I
5f
I
11
I
66
I
1d
I
79
I
23
I
91
I
2c
I
9f
I
34
I
b2
I
4c
I
c5
I
52
I
d8
I
58
I
f0
I
5d
I
103
I
62
I
116
I
67
I
129
I
6c
I
137
I
76
I
14a
I
7b
I
15d
I
87
I
170
I
97
I
183
I
9c
I
196
I
a1
I
1a9
I
a6
I
1bc
I
b5
I
1cf
I
c4
I
1e2
I
cd
I
1f5
I
d4
I
208
I
db
I
220
I
e4
I
233
I
eb
I
241
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
x
13
attach_method
p
5
I
0
I
ed
I
0
I
ec
I
1d
x
40
/more/vic/hk/fancy-lang/lib/rbx/array.fy
p
0
