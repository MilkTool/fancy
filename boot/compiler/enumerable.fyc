!RBIX
0
x
M
1
n
n
x
10
__script__
i
29
99
7
0
1
65
49
1
3
13
99
12
7
2
12
7
3
12
65
12
49
4
4
15
49
2
0
15
2
11
I
6
I
0
I
0
I
0
n
p
5
x
15
FancyEnumerable
x
10
open_class
x
14
__class_init__
M
1
n
n
x
15
FancyEnumerable
i
386
5
66
7
0
64
15
5
49
1
0
15
99
7
2
7
3
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
6
7
7
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
8
7
9
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
10
7
11
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
12
7
13
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
14
7
15
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
16
7
17
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
18
7
19
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
20
7
21
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
22
7
23
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
24
7
25
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
26
7
27
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
28
7
29
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
30
7
31
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
32
7
33
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
34
7
35
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
36
7
37
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
38
7
39
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
40
7
41
65
67
49
4
0
49
5
4
15
5
49
1
0
15
99
7
42
7
43
65
67
49
4
0
49
5
4
11
I
5
I
0
I
0
I
0
n
p
44
s
91
""
  Mixin-Class with useful methods for collections that implement an @each:@ method.
  ""
x
6
public
x
10
includes?:
M
1
n
n
x
10
includes?:
i
12
7
0
64
15
5
56
1
47
49
2
1
11
I
3
I
1
I
1
I
1
n
p
3
s
52
Indicates, if a collection includes a given element.
M
1
p
2
x
9
for_block
t
n
x
10
includes?:
i
14
57
19
0
15
21
1
0
20
0
47
49
0
1
11
I
4
I
1
I
1
I
1
n
p
1
x
3
:==
p
3
I
0
I
8
I
e
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
any?:
p
13
I
0
I
9
I
0
I
8
I
0
I
7
I
4
I
9
I
5
I
8
I
7
I
9
I
c
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
4
item
x
17
method_visibility
x
15
add_defn_method
x
5
any?:
M
1
n
n
x
5
any?:
i
14
7
0
64
15
5
56
1
47
49
2
1
15
1
11
I
3
I
1
I
1
I
1
n
p
3
s
46
Indicates, if any element meets the condition.
M
1
p
2
x
9
for_block
t
n
x
5
any?:
i
22
57
19
0
15
21
1
0
20
0
35
1
47
49
0
1
56
1
47
49
2
1
11
I
4
I
1
I
1
I
1
n
p
3
x
5
call:
M
1
p
2
x
9
for_block
t
n
x
5
any?:
i
3
2
31
11
I
2
I
0
I
0
I
0
n
p
0
p
3
I
0
I
11
I
3
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
8
if_true:
p
9
I
0
I
12
I
4
I
f
I
f
I
11
I
11
I
12
I
16
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
13
I
0
I
14
I
0
I
d
I
0
I
c
I
4
I
13
I
5
I
12
I
7
I
13
I
e
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
9
condition
x
5
all?:
M
1
n
n
x
5
all?:
i
14
7
0
64
15
5
56
1
47
49
2
1
15
2
11
I
3
I
1
I
1
I
1
n
p
3
s
46
Indicates, if all elements meet the condition.
M
1
p
2
x
9
for_block
t
n
x
5
all?:
i
22
57
19
0
15
21
1
0
20
0
35
1
47
49
0
1
56
1
47
49
2
1
11
I
4
I
1
I
1
I
1
n
p
3
x
5
call:
M
1
p
2
x
9
for_block
t
n
x
5
all?:
i
3
3
31
11
I
2
I
0
I
0
I
0
n
p
0
p
3
I
0
I
1c
I
3
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
9
if_false:
p
9
I
0
I
1d
I
4
I
1a
I
f
I
1c
I
11
I
1d
I
16
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
13
I
0
I
1f
I
0
I
18
I
0
I
17
I
4
I
1e
I
5
I
1d
I
7
I
1e
I
e
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
9
condition
x
5
find:
M
1
n
n
x
5
find:
i
22
7
0
64
15
20
0
45
1
2
47
49
3
1
56
4
56
5
47
49
6
2
11
I
4
I
1
I
1
I
1
n
p
7
s
77
Returns @nil, if the given object isn't found, or the object, if it is found.
x
5
Block
n
x
6
is_a?:
M
1
p
2
x
9
for_block
t
n
x
5
find:
i
9
5
21
1
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
8
find_by:
p
7
I
0
I
26
I
1
I
25
I
4
I
26
I
9
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
M
1
p
2
x
9
for_block
t
n
x
5
find:
i
10
5
56
0
47
49
1
1
15
1
11
I
3
I
0
I
0
I
0
n
p
2
M
1
p
2
x
9
for_block
t
n
x
5
find:
i
20
57
19
0
15
21
2
0
20
0
47
49
0
1
56
1
47
49
2
1
11
I
4
I
1
I
1
I
1
n
p
3
x
3
:==
M
1
p
2
x
9
for_block
t
n
x
5
find:
i
5
21
1
0
31
11
I
2
I
0
I
0
I
0
n
p
0
p
5
I
0
I
2a
I
0
I
29
I
5
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
8
if_true:
p
9
I
0
I
2b
I
4
I
28
I
d
I
2a
I
f
I
2b
I
14
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
9
I
0
I
2d
I
0
I
2c
I
1
I
2b
I
3
I
2c
I
a
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
13
if_true:else:
p
15
I
0
I
2e
I
0
I
23
I
0
I
22
I
4
I
24
I
d
I
26
I
f
I
2d
I
11
I
2e
I
16
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
4
item
x
8
find_by:
M
1
n
n
x
8
find_by:
i
14
7
0
64
15
5
56
1
47
49
2
1
15
1
11
I
3
I
1
I
1
I
1
n
p
3
s
94
""
    Similar to @find:@ but takes a block that is called for each element to find it.
    ""
M
1
p
2
x
9
for_block
t
n
x
8
find_by:
i
22
57
19
0
15
21
1
0
20
0
35
1
47
49
0
1
56
1
47
49
2
1
11
I
4
I
1
I
1
I
1
n
p
3
x
5
call:
M
1
p
2
x
9
for_block
t
n
x
8
find_by:
i
8
57
19
0
15
20
0
31
11
I
3
I
1
I
1
I
1
n
p
0
p
5
I
0
I
38
I
4
I
37
I
8
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
4
item
x
6
if_do:
p
9
I
0
I
39
I
4
I
36
I
f
I
38
I
11
I
39
I
16
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
13
I
0
I
3b
I
0
I
34
I
0
I
33
I
4
I
3a
I
5
I
39
I
7
I
3a
I
e
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
5
block
x
4
map:
M
1
n
n
x
4
map:
i
20
7
0
64
15
35
0
19
1
15
5
56
1
47
49
2
1
15
20
1
11
I
4
I
2
I
1
I
1
n
p
3
s
81
Returns a new @Array@ with the results of calling a given block for every element
M
1
p
2
x
9
for_block
t
n
x
4
map:
i
23
57
19
0
15
21
1
1
21
1
0
20
0
35
1
47
49
0
1
47
49
1
1
11
I
5
I
1
I
1
I
1
n
p
2
x
5
call:
x
3
:<<
p
5
I
0
I
43
I
4
I
42
I
17
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
45
I
0
I
3f
I
0
I
3e
I
4
I
40
I
9
I
44
I
a
I
43
I
c
I
44
I
14
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
2
x
5
block
x
4
coll
x
7
select:
M
1
n
n
x
7
select:
i
20
7
0
64
15
35
0
19
1
15
5
56
1
47
49
2
1
15
20
1
11
I
4
I
2
I
1
I
1
n
p
3
s
76
Returns a new @Array@ with all elements that meet the given condition block.
M
1
p
2
x
9
for_block
t
n
x
7
select:
i
22
57
19
0
15
56
0
21
1
0
20
0
35
1
47
49
1
1
47
49
2
1
11
I
5
I
1
I
1
I
1
n
p
3
M
1
p
2
x
9
for_block
t
n
x
7
select:
i
11
21
2
1
21
1
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
3
:<<
p
3
I
0
I
4c
I
b
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
5
call:
x
3
if:
p
7
I
0
I
4d
I
4
I
4c
I
d
I
4d
I
16
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
4f
I
0
I
49
I
0
I
48
I
4
I
4a
I
9
I
4e
I
a
I
4d
I
c
I
4e
I
14
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
2
x
9
condition
x
4
coll
x
7
reject:
M
1
n
n
x
7
reject:
i
20
7
0
64
15
35
0
19
1
15
5
56
1
47
49
2
1
15
20
1
11
I
4
I
2
I
1
I
1
n
p
3
s
82
Returns a new @Array@ with all elements that don't meet the given condition block.
M
1
p
2
x
9
for_block
t
n
x
7
reject:
i
22
57
19
0
15
56
0
21
1
0
20
0
35
1
47
49
1
1
47
49
2
1
11
I
5
I
1
I
1
I
1
n
p
3
M
1
p
2
x
9
for_block
t
n
x
7
reject:
i
11
21
2
1
21
1
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
3
:<<
p
3
I
0
I
56
I
b
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
5
call:
x
7
unless:
p
7
I
0
I
57
I
4
I
56
I
d
I
57
I
16
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
59
I
0
I
53
I
0
I
52
I
4
I
54
I
9
I
58
I
a
I
57
I
c
I
58
I
14
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
2
x
9
condition
x
4
coll
x
11
take_while:
M
1
n
n
x
11
take_while:
i
20
7
0
64
15
35
0
19
1
15
5
56
1
47
49
2
1
15
20
1
11
I
4
I
2
I
1
I
1
n
p
3
s
107
Returns a new @Array@ by taking elements from the beginning as long as they meet the given condition block.
M
1
p
2
x
9
for_block
t
n
x
11
take_while:
i
24
57
19
0
15
21
1
0
20
0
35
1
47
49
0
1
56
1
56
2
47
49
3
2
11
I
5
I
1
I
1
I
1
n
p
4
x
5
call:
M
1
p
2
x
9
for_block
t
n
x
11
take_while:
i
11
21
2
1
21
1
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
3
:<<
p
5
I
0
I
61
I
0
I
60
I
b
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
M
1
p
2
x
9
for_block
t
n
x
11
take_while:
i
5
21
2
1
31
11
I
2
I
0
I
0
I
0
n
p
0
p
5
I
0
I
63
I
0
I
62
I
5
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
13
if_true:else:
p
11
I
0
I
64
I
4
I
5f
I
f
I
61
I
11
I
63
I
13
I
64
I
18
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
66
I
0
I
5d
I
0
I
5c
I
4
I
5d
I
9
I
65
I
a
I
64
I
c
I
65
I
14
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
2
x
9
condition
x
4
coll
x
11
drop_while:
M
1
n
n
x
11
drop_while:
i
28
7
0
64
15
35
0
19
1
15
1
19
2
15
2
19
3
15
5
56
1
47
49
2
1
15
20
1
11
I
6
I
4
I
1
I
1
n
p
3
s
109
Returns a new @Array@ by skipping elements from the beginning as long as they meet the given condition block.
M
1
p
2
x
9
for_block
t
n
x
11
drop_while:
i
23
57
19
0
15
21
1
2
21
1
3
47
49
0
1
56
1
56
2
47
49
3
2
11
I
5
I
1
I
1
I
1
n
p
4
x
3
or:
M
1
p
2
x
9
for_block
t
n
x
11
drop_while:
i
31
21
2
0
21
1
0
35
1
47
49
0
1
22
2
2
15
1
22
2
3
15
21
2
2
56
1
47
49
2
1
11
I
3
I
0
I
0
I
0
n
p
3
x
5
call:
M
1
p
2
x
9
for_block
t
n
x
11
drop_while:
i
11
21
3
1
21
2
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
3
:<<
p
5
I
0
I
75
I
0
I
74
I
b
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
9
if_false:
p
15
I
0
I
76
I
0
I
71
I
0
I
70
I
8
I
71
I
15
I
73
I
18
I
75
I
1a
I
76
I
1f
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
M
1
p
2
x
9
for_block
t
n
x
11
drop_while:
i
11
21
2
1
21
1
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
3
:<<
p
5
I
0
I
78
I
0
I
77
I
b
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
13
if_true:else:
p
11
I
0
I
79
I
4
I
6f
I
e
I
76
I
10
I
78
I
12
I
79
I
17
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
19
I
0
I
7b
I
0
I
6a
I
0
I
69
I
4
I
6b
I
9
I
6c
I
d
I
6d
I
11
I
7a
I
12
I
79
I
14
I
7a
I
1c
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
4
x
9
condition
x
4
coll
x
4
drop
x
11
first_check
x
16
reduce:init_val:
M
1
n
n
x
16
reduce:init_val:
i
20
7
0
64
15
20
1
19
2
15
5
56
1
47
49
2
1
15
20
2
11
I
5
I
3
I
2
I
2
n
p
3
s
100
Calculates a value based on a given block to be called on an accumulator value and an initial value.
M
1
p
2
x
9
for_block
t
n
x
16
reduce:init_val:
i
22
57
19
0
15
21
1
0
21
1
2
20
0
35
2
47
49
0
1
22
1
2
11
I
5
I
1
I
1
I
1
n
p
1
x
5
call:
p
5
I
0
I
83
I
4
I
82
I
16
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
85
I
0
I
7f
I
0
I
7e
I
4
I
80
I
9
I
84
I
a
I
83
I
c
I
84
I
14
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
3
x
5
block
x
8
init_val
x
3
acc
x
5
:uniq
M
1
n
n
x
5
:uniq
i
20
7
0
64
15
35
0
19
0
15
5
56
1
47
49
2
1
15
20
0
11
I
3
I
1
I
0
I
0
n
p
3
s
72
Returns a new Array with all unique values (double entries are skipped).
M
1
p
2
x
9
for_block
t
n
x
5
:uniq
i
20
57
19
0
15
21
1
0
20
0
47
49
0
1
56
1
47
49
2
1
11
I
4
I
1
I
1
I
1
n
p
3
x
10
includes?:
M
1
p
2
x
9
for_block
t
n
x
5
:uniq
i
11
21
2
0
21
1
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
3
:<<
p
5
I
0
I
8e
I
0
I
8d
I
b
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
9
if_false:
p
9
I
0
I
8f
I
4
I
8c
I
d
I
8e
I
f
I
8f
I
14
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
91
I
0
I
89
I
0
I
88
I
4
I
8a
I
9
I
90
I
a
I
8f
I
c
I
90
I
14
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
9
uniq_vals
x
5
:size
M
1
n
n
x
5
:size
i
19
7
0
64
15
78
19
0
15
5
56
1
47
49
2
1
15
20
0
11
I
3
I
1
I
0
I
0
n
p
3
s
34
Returns the size of an Enumerable.
M
1
p
2
x
9
for_block
t
n
x
5
:size
i
16
57
19
0
15
21
1
0
79
47
49
0
1
22
1
0
11
I
4
I
1
I
1
I
1
n
p
1
x
2
:+
p
5
I
0
I
99
I
4
I
98
I
10
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
9b
I
0
I
95
I
0
I
94
I
4
I
96
I
8
I
9a
I
9
I
99
I
b
I
9a
I
13
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
i
x
7
:empty?
M
1
n
n
x
7
:empty?
i
15
7
0
64
15
5
47
49
1
0
78
47
49
2
1
11
I
2
I
0
I
0
I
0
n
p
3
s
56
Indicates, if the Enumerable is empty (has no elements).
x
5
:size
x
3
:==
p
9
I
0
I
a0
I
0
I
9f
I
0
I
9e
I
4
I
9f
I
f
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
6
:first
M
1
n
n
x
6
:first
i
8
5
56
0
47
49
1
1
11
I
2
I
0
I
0
I
0
n
p
2
M
1
p
2
x
9
for_block
t
n
x
6
:first
i
8
57
19
0
15
20
0
31
11
I
3
I
1
I
1
I
1
n
p
0
p
5
I
0
I
a5
I
4
I
a4
I
8
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
9
I
0
I
a6
I
0
I
a3
I
1
I
a5
I
3
I
a6
I
8
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
5
:last
M
1
n
n
x
5
:last
i
19
7
0
64
15
1
19
0
15
5
56
1
47
49
2
1
15
20
0
11
I
3
I
1
I
0
I
0
n
p
3
s
42
Returns the last element in an Enumerable.
M
1
p
2
x
9
for_block
t
n
x
5
:last
i
10
57
19
0
15
20
0
22
1
0
11
I
3
I
1
I
1
I
1
n
p
0
p
5
I
0
I
ae
I
4
I
ad
I
a
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
b0
I
0
I
aa
I
0
I
a9
I
4
I
ab
I
8
I
af
I
9
I
ae
I
b
I
af
I
13
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
4
item
x
8
:compact
M
1
n
n
x
8
:compact
i
12
7
0
64
15
5
56
1
47
49
2
1
11
I
2
I
0
I
0
I
0
n
p
3
s
86
Returns a new @Array@ with all values removed that are @nil ( return @true on @nil? ).
M
1
p
2
x
9
for_block
t
n
x
8
:compact
i
11
57
19
0
15
20
0
47
49
0
0
11
I
3
I
1
I
1
I
1
n
p
1
x
5
:nil?
p
3
I
0
I
b5
I
b
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
7
reject:
p
13
I
0
I
b6
I
0
I
b4
I
0
I
b3
I
4
I
b6
I
5
I
b5
I
7
I
b6
I
c
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
12
superior_by:
M
1
n
n
x
12
superior_by:
i
23
7
0
64
15
5
47
49
1
0
19
1
15
5
56
2
47
49
3
1
15
20
1
11
I
4
I
2
I
1
I
1
n
p
4
s
113
Returns the superiour element in the @Enumerable that has met the given comparison block with all other elements.
x
6
:first
M
1
p
2
x
9
for_block
t
n
x
12
superior_by:
i
25
57
19
0
15
21
1
0
20
0
21
1
1
35
2
47
49
0
1
56
1
47
49
2
1
11
I
5
I
1
I
1
I
1
n
p
3
x
5
call:
M
1
p
2
x
9
for_block
t
n
x
12
superior_by:
i
7
21
1
0
22
2
1
11
I
2
I
0
I
0
I
0
n
p
0
p
5
I
0
I
bf
I
0
I
be
I
7
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
8
if_true:
p
9
I
0
I
c0
I
4
I
bd
I
12
I
bf
I
14
I
c0
I
19
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
1
x
1
x
x
5
each:
p
15
I
0
I
c2
I
0
I
ba
I
0
I
b9
I
4
I
bb
I
c
I
c1
I
d
I
c0
I
f
I
c1
I
17
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
2
x
16
comparison_block
x
6
retval
x
4
:max
M
1
n
n
x
4
:max
i
12
7
0
64
15
5
7
1
47
49
2
1
11
I
2
I
0
I
0
I
0
n
p
3
s
77
Returns the maximum value in the Enumerable (via the '>' comparison message).
x
1
>
x
12
superior_by:
p
13
I
0
I
c7
I
0
I
c6
I
0
I
c5
I
4
I
c7
I
5
I
c6
I
7
I
c7
I
c
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
4
:min
M
1
n
n
x
4
:min
i
12
7
0
64
15
5
7
1
47
49
2
1
11
I
2
I
0
I
0
I
0
n
p
3
s
77
Returns the minimum value in the Enumerable (via the '<' comparison message).
x
1
<
x
12
superior_by:
p
13
I
0
I
cc
I
0
I
cb
I
0
I
ca
I
4
I
cc
I
5
I
cb
I
7
I
cc
I
c
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
p
43
I
2
I
4
I
6
I
9
I
19
I
14
I
2c
I
1f
I
3f
I
2e
I
52
I
3b
I
65
I
45
I
78
I
4f
I
8b
I
59
I
9e
I
66
I
b1
I
7b
I
c4
I
85
I
dc
I
91
I
ef
I
9b
I
102
I
a0
I
115
I
a6
I
128
I
b0
I
13b
I
b6
I
149
I
c2
I
161
I
c7
I
174
I
cc
I
182
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
x
13
attach_method
p
5
I
0
I
ce
I
0
I
cd
I
1d
x
36
/more/vic/hk/fancy/lib/enumerable.fy
p
0
