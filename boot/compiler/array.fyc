!RBIX
0
x
M
1
n
n
x
10
__script__
i
29
99
7
0
1
65
49
1
3
13
99
12
7
2
12
7
3
12
65
12
49
4
4
15
49
2
0
15
2
11
I
6
I
0
I
0
I
0
n
p
5
x
5
Array
x
10
open_class
x
14
__class_init__
M
1
n
n
x
5
Array
i
357
5
66
7
0
64
15
5
45
1
2
47
49
3
1
15
5
49
4
0
15
99
7
5
7
6
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
9
7
10
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
11
7
12
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
13
7
14
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
15
7
16
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
17
7
18
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
19
7
20
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
21
7
22
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
23
7
24
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
25
7
26
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
27
7
28
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
29
7
30
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
31
7
32
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
33
7
34
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
35
7
36
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
37
7
38
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
39
7
40
65
67
49
7
0
49
8
4
15
5
49
4
0
15
99
7
41
7
42
65
67
49
7
0
49
8
4
11
I
5
I
0
I
0
I
0
n
p
43
s
122
""
  Array class.
  Arrays are dynamically resizable containers with a constant-time
  index-based access to members.
  ""
x
15
FancyEnumerable
n
x
8
include:
x
6
public
x
3
:[]
M
1
n
n
x
3
:[]
i
20
7
0
64
15
20
0
45
1
2
49
3
1
56
4
56
5
49
6
2
11
I
4
I
1
I
1
I
1
n
p
7
s
156
""
    Given an Array of 2 Numbers, it returns the sub-array between the
    given indices.
    If given a Number, returns the element at that index.
    ""
x
5
Array
n
x
6
is_a?:
M
1
p
2
x
9
for_block
t
n
x
3
:[]
i
20
5
21
1
0
78
49
0
1
21
1
0
79
49
0
1
47
49
1
2
11
I
5
I
0
I
0
I
0
n
p
2
x
3
:[]
x
8
from:to:
p
7
I
0
I
14
I
1
I
13
I
f
I
14
I
14
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
M
1
p
2
x
9
for_block
t
n
x
3
:[]
i
9
5
21
1
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
3
at:
p
7
I
0
I
16
I
1
I
15
I
4
I
16
I
9
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
13
if_true:else:
p
15
I
0
I
17
I
0
I
10
I
0
I
f
I
4
I
12
I
c
I
14
I
e
I
16
I
10
I
17
I
14
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
5
index
x
17
method_visibility
x
15
add_defn_method
x
5
:rest
M
1
n
n
x
5
:rest
i
12
7
0
64
15
5
79
77
47
49
1
2
11
I
3
I
0
I
0
I
0
n
p
2
s
57
Returns all elements except the first one as a new Array.
x
8
from:to:
p
13
I
0
I
1c
I
0
I
1b
I
0
I
1a
I
4
I
1c
I
5
I
1b
I
7
I
1c
I
c
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
3
:=?
M
1
n
n
x
3
:=?
i
18
7
0
64
15
20
0
45
1
2
49
3
1
56
4
49
5
1
11
I
3
I
1
I
1
I
1
n
p
6
s
112
""
    @other Other @Array@ to compare this one to.

    Compares two Arrays where order does not matter.
    ""
x
5
Array
n
x
6
is_a?:
M
1
p
2
x
9
for_block
t
n
x
3
:=?
i
22
5
47
49
0
0
21
1
0
49
0
0
49
1
1
56
2
56
3
49
4
2
11
I
4
I
0
I
0
I
0
n
p
5
x
5
:size
x
3
:!=
M
1
p
2
x
9
for_block
t
n
x
3
:=?
i
2
1
11
I
2
I
0
I
0
I
0
n
p
0
p
3
I
0
I
28
I
2
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
M
1
p
2
x
9
for_block
t
n
x
3
:=?
i
8
5
56
0
47
49
1
1
11
I
3
I
0
I
0
I
0
n
p
2
M
1
p
2
x
9
for_block
t
n
x
3
:=?
i
13
57
19
0
15
21
3
0
20
0
49
0
1
11
I
4
I
1
I
1
I
1
n
p
1
x
10
includes?:
p
3
I
0
I
29
I
d
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
1
x
x
5
all?:
p
7
I
0
I
2a
I
1
I
29
I
3
I
2a
I
8
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
13
if_true:else:
p
11
I
0
I
2b
I
0
I
26
I
e
I
28
I
10
I
2a
I
12
I
2b
I
16
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
8
if_true:
p
13
I
0
I
2c
I
0
I
24
I
0
I
23
I
4
I
25
I
c
I
2b
I
e
I
2c
I
12
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
5
other
x
5
find:
M
1
n
n
x
5
find:
i
20
7
0
64
15
20
0
45
1
2
49
3
1
56
4
56
5
49
6
2
11
I
4
I
1
I
1
I
1
n
p
7
s
194
""
    @item @Object@ / Element to find in the @Array@.
    @return @item if, it's found in the @Array@, otherwise @nil.

    Returns the item, if it's in the Array or nil (if not found).
    ""
x
5
Block
n
x
6
is_a?:
M
1
p
2
x
9
for_block
t
n
x
5
find:
i
9
5
21
1
0
47
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
8
find_by:
p
7
I
0
I
38
I
1
I
37
I
4
I
38
I
9
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
M
1
p
2
x
9
for_block
t
n
x
5
find:
i
14
5
21
1
0
47
49
0
1
56
1
49
2
1
11
I
3
I
0
I
0
I
0
n
p
3
x
6
index:
M
1
p
2
x
9
for_block
t
n
x
5
find:
i
12
57
19
0
15
5
20
0
47
49
0
1
11
I
4
I
1
I
1
I
1
n
p
1
x
3
at:
p
7
I
0
I
3b
I
5
I
3a
I
7
I
3b
I
c
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
3
idx
x
6
if_do:
p
9
I
0
I
3c
I
0
I
39
I
8
I
3b
I
a
I
3c
I
e
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
13
if_true:else:
p
15
I
0
I
3d
I
0
I
35
I
0
I
34
I
4
I
36
I
c
I
38
I
e
I
3c
I
10
I
3d
I
14
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
4
item
x
8
find_by:
M
1
n
n
x
8
find_by:
i
12
7
0
64
15
5
56
1
47
49
2
1
11
I
3
I
1
I
1
I
1
n
p
3
s
217
""
    @block @Block@ to be called for each element in the @Array@.
    @return The first element, for which @block yields @true.

    Like find: but takes a block that gets called with each element to find it.
    ""
M
1
p
2
x
9
for_block
t
n
x
8
find_by:
i
20
57
19
0
15
21
1
0
20
0
35
1
49
0
1
56
1
49
2
1
11
I
4
I
1
I
1
I
1
n
p
3
x
5
call:
M
1
p
2
x
9
for_block
t
n
x
8
find_by:
i
5
21
1
0
31
11
I
2
I
0
I
0
I
0
n
p
0
p
5
I
0
I
4a
I
0
I
49
I
5
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
8
if_true:
p
9
I
0
I
4b
I
4
I
48
I
e
I
4a
I
10
I
4b
I
14
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
1
x
x
5
each:
p
13
I
0
I
4c
I
0
I
46
I
0
I
45
I
4
I
47
I
5
I
4b
I
7
I
4c
I
c
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
5
block
x
10
values_at:
M
1
n
n
x
10
values_at:
i
20
7
0
64
15
35
0
19
1
15
20
0
56
1
49
2
1
15
20
1
11
I
4
I
2
I
1
I
1
n
p
3
s
172
""
    @idx_arr @Array@ of indices.
    @return @Array@ of all the items with the given indices in @idx_arr.

    Returns new @Array@ with elements at given indices.
    ""
M
1
p
2
x
9
for_block
t
n
x
10
values_at:
i
18
57
19
0
15
21
1
1
5
20
0
47
49
0
1
49
1
1
11
I
5
I
1
I
1
I
1
n
p
2
x
3
at:
x
3
:<<
p
5
I
0
I
59
I
4
I
58
I
12
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
3
idx
x
5
each:
p
15
I
0
I
5b
I
0
I
55
I
0
I
54
I
4
I
56
I
9
I
57
I
b
I
59
I
d
I
5a
I
14
x
31
/more/vic/hk/fancy/lib/array.fy
p
2
x
7
idx_arr
x
6
values
x
3
:>>
M
1
n
n
x
3
:>>
i
20
7
0
64
15
5
47
49
1
0
19
1
15
20
1
20
0
49
2
1
11
I
4
I
2
I
1
I
1
n
p
3
s
186
""
    @other_arr @Array@ to be appended to @self.
    @return New @Array@ with @other_arr and @self appended.

    Returns new Array with elements of other_arr appended to these.
    ""
x
6
:clone
x
7
append:
p
13
I
0
I
67
I
0
I
64
I
0
I
63
I
4
I
65
I
c
I
66
I
10
I
67
I
14
x
31
/more/vic/hk/fancy/lib/array.fy
p
2
x
9
other_arr
x
3
arr
x
5
:join
M
1
n
n
x
5
:join
i
13
7
0
64
15
5
7
1
64
47
49
2
1
11
I
2
I
0
I
0
I
0
n
p
3
s
178
""
    @return Elements of @Array@ joined to a @String@.

    Joins all elements with the empty @String@.
        [\"hello\", \"world\", \"!\"] join # => \"hello, world!\"
    ""
s
0

x
5
join:
p
13
I
0
I
72
I
0
I
70
I
0
I
6f
I
4
I
72
I
5
I
71
I
8
I
72
I
d
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
8
select!:
M
1
n
n
x
8
select!:
i
15
7
0
64
15
5
56
1
47
49
2
1
15
5
31
11
I
3
I
1
I
1
I
1
n
p
3
s
264
""
    @condition A condition @Block@ (or something @Callable) for selecting items from @self.
    @return @self, but changed with all elements removed that don't yield @true for @condition.

    Removes all elements in place, that don't meet the condition.
    ""
M
1
p
2
x
9
for_block
t
n
x
8
select!:
i
18
57
19
0
15
21
1
0
20
0
35
1
49
0
1
49
1
0
11
I
4
I
1
I
1
I
1
n
p
2
x
5
call:
x
4
:not
p
3
I
0
I
7c
I
12
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
1
x
x
8
reject!:
p
13
I
0
I
7e
I
0
I
7b
I
0
I
7a
I
4
I
7d
I
5
I
7c
I
7
I
7d
I
f
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
9
condition
x
9
:compact!
M
1
n
n
x
9
:compact!
i
15
7
0
64
15
5
56
1
47
49
2
1
15
5
31
11
I
2
I
0
I
0
I
0
n
p
3
s
73
""
    @return @self

    Removes all nil-value elements in place.
    ""
M
1
p
2
x
9
for_block
t
n
x
9
:compact!
i
10
57
19
0
15
20
0
49
0
0
11
I
3
I
1
I
1
I
1
n
p
1
x
5
:nil?
p
3
I
0
I
87
I
a
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
1
x
x
8
reject!:
p
13
I
0
I
89
I
0
I
86
I
0
I
85
I
4
I
88
I
5
I
87
I
7
I
88
I
f
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
7
remove:
M
1
n
n
x
7
remove:
i
17
7
0
64
15
5
5
20
0
47
49
1
1
47
49
2
1
11
I
4
I
1
I
1
I
1
n
p
3
s
158
""
    @obj Object to be removed within @self.
    @return @self, with all occurances of @obj removed.

    Removes all occurances of obj in the Array.
    ""
x
11
indices_of:
x
10
remove_at:
p
13
I
0
I
94
I
0
I
92
I
0
I
91
I
4
I
94
I
5
I
93
I
c
I
94
I
11
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
3
obj
x
10
remove_if:
M
1
n
n
x
10
remove_if:
i
22
7
0
64
15
5
5
56
1
47
49
2
1
7
3
49
4
1
47
49
5
1
11
I
4
I
1
I
1
I
1
n
p
6
s
309
""
    @condition @Block@ (or @Callable) that indicates, if an element should be removed from @self.
    @return @self, with all elements removed for which @condition yields true.

    Like @Array#remove:@, but taking a condition @Block@.
    Removes all elements that meet the given condition @Block@.
    ""
M
1
p
2
x
9
for_block
t
n
x
10
remove_if:
i
21
58
37
19
0
15
37
19
1
15
15
21
1
0
20
0
35
1
49
0
1
11
I
5
I
2
I
2
I
2
n
p
1
x
5
call:
p
3
I
0
I
9f
I
15
x
31
/more/vic/hk/fancy/lib/array.fy
p
2
x
1
x
x
1
i
x
18
select_with_index:
x
6
second
x
4
map:
x
10
remove_at:
p
15
I
0
I
a1
I
0
I
9e
I
0
I
9d
I
4
I
a1
I
5
I
9f
I
c
I
a0
I
11
I
a1
I
16
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
9
condition
x
8
:println
M
1
n
n
x
8
:println
i
12
7
0
64
15
5
56
1
47
49
2
1
11
I
2
I
0
I
0
I
0
n
p
3
s
39
Prints each element on a seperate line.
M
1
p
2
x
9
for_block
t
n
x
8
:println
i
10
57
19
0
15
20
0
49
0
0
11
I
3
I
1
I
1
I
1
n
p
1
x
8
:println
p
5
I
0
I
a8
I
4
I
a7
I
a
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
1
x
x
5
each:
p
13
I
0
I
a9
I
0
I
a5
I
0
I
a4
I
4
I
a9
I
5
I
a8
I
7
I
a9
I
c
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
5
:to_s
M
1
n
n
x
5
:to_s
i
15
7
0
64
15
5
56
1
7
2
64
47
49
3
2
11
I
3
I
0
I
0
I
0
n
p
4
s
43
Returns @String@ representation of @Array@.
M
1
p
2
x
9
for_block
t
n
x
5
:to_s
i
18
58
37
19
0
15
37
19
1
15
15
20
0
20
1
49
0
1
11
I
5
I
2
I
2
I
2
n
p
1
x
3
:++
p
3
I
0
I
ae
I
12
x
31
/more/vic/hk/fancy/lib/array.fy
p
2
x
1
x
x
1
y
s
0

x
16
reduce:init_val:
p
13
I
0
I
af
I
0
I
ad
I
0
I
ac
I
4
I
af
I
5
I
ae
I
a
I
af
I
f
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
2
:*
M
1
n
n
x
2
:*
i
20
7
0
64
15
35
0
19
1
15
20
0
56
1
49
2
1
15
20
1
11
I
4
I
2
I
1
I
1
n
p
3
s
94
""
    Returns a new @Array@ that contains the elements of self num times
    in a row.
    ""
M
1
p
2
x
9
for_block
t
n
x
2
:*
i
8
21
1
1
5
49
0
1
11
I
3
I
0
I
0
I
0
n
p
1
x
7
append:
p
7
I
0
I
ba
I
0
I
b9
I
4
I
ba
I
8
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
6
times:
p
15
I
0
I
bc
I
0
I
b6
I
0
I
b5
I
4
I
b7
I
9
I
b8
I
b
I
ba
I
d
I
bb
I
14
x
31
/more/vic/hk/fancy/lib/array.fy
p
2
x
3
num
x
3
arr
x
2
:+
M
1
n
n
x
2
:+
i
15
7
0
64
15
5
47
49
1
0
20
0
49
2
1
11
I
3
I
1
I
1
I
1
n
p
3
s
43
Returns concatenation with another @Array@.
x
6
:clone
x
7
append:
p
11
I
0
I
c2
I
0
I
c0
I
0
I
bf
I
4
I
c1
I
b
I
c2
I
f
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
9
other_arr
x
16
each:in_between:
M
1
n
n
x
16
each:in_between:
i
24
7
0
64
15
78
19
2
15
5
47
49
1
0
19
3
15
5
56
2
47
49
3
1
11
I
6
I
4
I
2
I
2
n
p
4
s
134
""
    Similar to @Array#each:@ but calls an additional @Block@ between
    calling the first @Block@ for each element in self.
    ""
x
5
:size
M
1
p
2
x
9
for_block
t
n
x
16
each:in_between:
i
45
57
19
0
15
21
1
0
20
0
35
1
49
0
1
15
21
1
2
21
1
3
79
49
1
1
49
2
1
56
3
49
4
1
15
21
1
2
79
49
5
1
22
1
2
11
I
5
I
1
I
1
I
1
n
p
6
x
5
call:
x
2
:-
x
3
:==
M
1
p
2
x
9
for_block
t
n
x
16
each:in_between:
i
7
21
2
1
49
0
0
11
I
2
I
0
I
0
I
0
n
p
1
x
5
:call
p
5
I
0
I
d0
I
0
I
cf
I
7
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
9
if_false:
x
2
:+
p
11
I
0
I
d2
I
4
I
cd
I
b
I
ce
I
1c
I
d0
I
1e
I
d1
I
2d
x
31
/more/vic/hk/fancy/lib/array.fy
p
1
x
1
x
x
5
each:
p
17
I
0
I
d3
I
0
I
c9
I
0
I
c8
I
4
I
ca
I
8
I
cb
I
10
I
d3
I
11
I
d2
I
13
I
d3
I
18
x
31
/more/vic/hk/fancy/lib/array.fy
p
4
x
10
each_block
x
13
between_block
x
5
count
x
4
size
x
8
:indices
M
1
n
n
x
8
:indices
i
18
7
0
64
15
78
5
47
49
1
0
79
49
2
1
49
3
1
11
I
3
I
0
I
0
I
0
n
p
4
s
52
Returns an @Array@ of all the indices of an @Array@.
x
5
:size
x
2
:-
x
5
upto:
p
11
I
0
I
d9
I
0
I
d7
I
0
I
d6
I
4
I
d8
I
e
I
d9
I
12
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
p
45
I
2
I
6
I
6
I
9
I
7
I
8
I
a
I
9
I
14
I
17
I
27
I
1c
I
3a
I
2c
I
48
I
3d
I
5b
I
4c
I
6e
I
5b
I
86
I
67
I
99
I
72
I
a7
I
7e
I
bf
I
89
I
cd
I
94
I
e0
I
a1
I
f8
I
a9
I
10b
I
af
I
11e
I
bc
I
131
I
c2
I
13f
I
d3
I
157
I
d9
I
165
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
x
13
attach_method
p
5
I
0
I
db
I
0
I
da
I
1d
x
31
/more/vic/hk/fancy/lib/array.fy
p
0
