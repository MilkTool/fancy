# *** This file is generated by InstructionParser ***

def class Rubinius {
  def class InstructionSet {
    self opcode:  0 name: 'noop                         params: <['stack => [0, 0],     'args => [],                               'control_flow => 'next]>;

    # Push primitiv values
    self opcode:  1 name: 'push_nil                     params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode:  2 name: 'push_true                    params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode:  3 name: 'push_false                   params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode:  4 name: 'push_int                     params: <['stack => [0, 1],     'args => ['number],                        'control_flow => 'next]>;
    self opcode:  5 name: 'push_self                    params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;

    # Manipulate literals
    self opcode:  6 name: 'set_literal                  params: <['stack => [0, 0],     'args => ['literal],                       'control_flow => 'next]>;
    self opcode:  7 name: 'push_literal                 params: <['stack => [0, 1],     'args => ['literal],                       'control_flow => 'next]>;

    # Flow control
    self opcode:  8 name: 'goto                         params: <['stack => [0, 0],     'args => ['location],                      'control_flow => 'branch]>;
    self opcode:  9 name: 'goto_if_false                params: <['stack => [1, 0],     'args => ['location],                      'control_flow => 'branch]>;
    self opcode: 10 name: 'goto_if_true                 params: <['stack => [1, 0],     'args => ['location],                      'control_flow => 'branch]>;
    self opcode: 11 name: 'ret                          params: <['stack => [0, 0],     'args => [],                               'control_flow => 'return]>;

    # Stack manipul ions
    self opcode: 12 name: 'swap_stack                   params: <['stack => [0, 0],     'args => [],                               'control_flow => 'next]>;
    self opcode: 13 name: 'dup_top                      params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 14 name: 'dup_many                     params: <['stack => [[0,1], [0, 1, 2]], 'args => ['count],                  'control_flow => 'next]>;
    self opcode: 15 name: 'pop                          params: <['stack => [1, 0],     'args => [],                               'control_flow => 'next]>;
    self opcode: 16 name: 'pop_many                     params: <['stack => [[0,1], 0], 'args => ['count],                         'control_flow => 'next]>;
    self opcode: 17 name: 'rotate                       params: <['stack => [0, 0],     'args => ['count],                         'control_flow => 'next]>;
    self opcode: 18 name: 'move_down                    params: <['stack => [0, 0],     'args => ['positions],                     'control_flow => 'next]>;

    # Manipulate local variables
    self opcode: 19 name: 'set_local                    params: <['stack => [0, 0],     'args => ['local],                         'control_flow => 'next]>;
    self opcode: 20 name: 'push_local                   params: <['stack => [0, 1],     'args => ['local],                         'control_flow => 'next]>;
    self opcode: 21 name: 'push_local_depth             params: <['stack => [0, 1],     'args => ['depth, 'index],                 'control_flow => 'next]>;
    self opcode: 22 name: 'set_local_depth              params: <['stack => [0, 0],     'args => ['depth, 'index],                 'control_flow => 'next]>;
    self opcode: 23 name: 'passed_arg                   params: <['stack => [0, 1],     'args => ['index],                         'control_flow => 'next]>;

    # Manipulate ex options
    self opcode: 24 name: 'push_current_exception       params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 25 name: 'clear_exception              params: <['stack => [0, 0],     'args => [],                               'control_flow => 'next]>;
    self opcode: 26 name: 'push_exception_state         params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 27 name: 'restore_exception_state      params: <['stack => [1, 0],     'args => [],                               'control_flow => 'next]>;
    self opcode: 28 name: 'raise_exc                    params: <['stack => [0, 0],     'args => [],                               'control_flow => 'raise]>;
    self opcode: 29 name: 'setup_unwind                 params: <['stack => [0, 0],     'args => ['ip, 'type],                     'control_flow => 'handler]>;
    self opcode: 30 name: 'pop_unwind                   params: <['stack => [0, 0],     'args => [],                               'control_flow => 'next]>;
    self opcode: 31 name: 'raise_return                 params: <['stack => [0, 0],     'args => [],                               'control_flow => 'raise]>;
    self opcode: 32 name: 'ensure_return                params: <['stack => [0, 0],     'args => [],                               'control_flow => 'raise]>;
    self opcode: 33 name: 'raise_break                  params: <['stack => [0, 0],     'args => [],                               'control_flow => 'raise]>;
    self opcode: 34 name: 'reraise                      params: <['stack => [0, 0],     'args => [],                               'control_flow => 'raise]>;

    # Manipulate arrays
    self opcode: 35 name: 'make_array                   params: <['stack => [[0,1], 1], 'args => ['count],                         'control_flow => 'next]>;
    self opcode: 36 name: 'cast_array                   params: <['stack => [1, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 37 name: 'shift_array                  params: <['stack => [1, 2],     'args => [],                               'control_flow => 'next]>;

    # Manipulate instance variables
    self opcode: 38 name: 'set_ivar                     params: <['stack => [0, 0],     'args => ['index],                         'control_flow => 'next]>;
    self opcode: 39 name: 'push_ivar                    params: <['stack => [0, 1],     'args => ['index],                         'control_flow => 'next]>;

    # Manipulate constants
    self opcode: 40 name: 'push_const                   params: <['stack => [0, 1],     'args => ['literal],                       'control_flow => 'next]>;
    self opcode: 41 name: 'set_const                    params: <['stack => [0, 0],     'args => ['index],                         'control_flow => 'next]>;
    self opcode: 42 name: 'set_const_at                 params: <['stack => [2, 0],     'args => ['index],                         'control_flow => 'next]>;
    self opcode: 43 name: 'find_const                   params: <['stack => [1, 1],     'args => ['index],                         'control_flow => 'next]>;
    self opcode: 44 name: 'push_cpath_top               params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 45 name: 'push_const_fast              params: <['stack => [0, 1],     'args => ['literal, 'association],         'control_flow => 'next]>;

    # Send messages
    self opcode: 46 name: 'set_call_flags               params: <['stack => [0, 0],     'args => ['flags],                         'control_flow => 'next]>;
    self opcode: 47 name: 'allow_private                params: <['stack => [0, 0],     'args => [],                               'control_flow => 'next]>;
    self opcode: 48 name: 'send_method                  params: <['stack => [1, 1],     'args => ['literal],                       'control_flow => 'send]>;
    self opcode: 49 name: 'send_stack                   params: <['stack => [[1,2], 1], 'args => ['literal, 'count],               'control_flow => 'send]>;
    self opcode: 50 name: 'send_stack_with_block        params: <['stack => [[2,2], 1], 'args => ['literal, 'count],               'control_flow => 'send]>;

    CALL_FLAG_CONCA = 2;

    self opcode: 51 name: 'send_stack_with_splat        params: <['stack => [[3,2], 1], 'args => ['literal, 'count],               'control_flow => 'send]>;
    self opcode: 52 name: 'send_super_stack_with_block  params: <['stack => [[1,2], 1], 'args => ['literal, 'count],               'control_flow => 'send]>;
    self opcode: 53 name: 'send_super_stack_with_splat  params: <['stack => [[2,2], 1], 'args => ['literal, 'count],               'control_flow => 'send]>;

    # Manipulate blocks
    self opcode: 54 name: 'push_block                   params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 55 name: 'passed_blockarg              params: <['stack => [0, 1],     'args => ['count],                         'control_flow => 'next]>;
    self opcode: 56 name: 'create_block                 params: <['stack => [0, 1],     'args => ['literal],                       'control_flow => 'next]>;
    self opcode: 57 name: 'cast_for_single_block_arg    params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 58 name: 'cast_for_multi_block_arg     params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 59 name: 'cast_for_splat_block_arg     params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 60 name: 'yield_stack                  params: <['stack => [[0,1], 1], 'args => ['count],                         'control_flow => 'yield]>;
    self opcode: 61 name: 'yield_splat                  params: <['stack => [[1,1], 1], 'args => ['count],                         'control_flow => 'yield]>;

    # Manipulate strings
    self opcode: 62 name: 'string_append                params: <['stack => [2, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 63 name: 'string_build                 params: <['stack => [[0,1], 1], 'args => ['count],                         'control_flow => 'next]>;
    self opcode: 64 name: 'string_dup                   params: <['stack => [1, 1],     'args => [],                               'control_flow => 'next]>;

    # Manipulate scopes
    self opcode: 65 name: 'push_scope                   params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 66 name: 'add_scope                    params: <['stack => [1, 0],     'args => [],                               'control_flow => 'next]>;
    self opcode: 67 name: 'push_variables               params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;

    # Miscellaneous TODO: better categorize these
    self opcode: 68 name: 'check_interrupts             params: <['stack => [0, 0],     'args => [],                               'control_flow => 'next]>;
    self opcode: 69 name: 'yield_debugger               params: <['stack => [0, 0],     'args => [],                               'control_flow => 'next]>;
    self opcode: 70 name: 'is_nil                       params: <['stack => [1, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 71 name: 'check_serial                 params: <['stack => [1, 1],     'args => ['literal, 'serial],              'control_flow => 'next]>;
    self opcode: 72 name: 'check_serial_private         params: <['stack => [1, 1],     'args => ['literal, 'serial],              'control_flow => 'next]>;

    # Access object fields
    self opcode: 73 name: 'push_my_field                params: <['stack => [0, 1],     'args => ['index],                         'control_flow => 'next]>;
    self opcode: 74 name: 'store_my_field               params: <['stack => [0, 0],     'args => ['index],                         'control_flow => 'next]>;

    # Type checks
    self opcode: 75 name: 'kind_of                      params: <['stack => [2, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 76 name: 'instance_of                  params: <['stack => [2, 1],     'args => [],                               'control_flow => 'next]>;

    # Optimization instructions
    self opcode: 77 name: 'meta_push_neg_1              params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 78 name: 'meta_push_0                  params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 79 name: 'meta_push_1                  params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 80 name: 'meta_push_2                  params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 81 name: 'meta_send_op_plus            params: <['stack => [2, 1],     'args => ['literal],                       'control_flow => 'send]>;
    self opcode: 82 name: 'meta_send_op_minus           params: <['stack => [2, 1],     'args => ['literal],                       'control_flow => 'send]>;
    self opcode: 83 name: 'meta_send_op_equal           params: <['stack => [2, 1],     'args => ['literal],                       'control_flow => 'send]>;
    self opcode: 84 name: 'meta_send_op_lt              params: <['stack => [2, 1],     'args => ['literal],                       'control_flow => 'next]>;
    self opcode: 85 name: 'meta_send_op_gt              params: <['stack => [2, 1],     'args => ['literal],                       'control_flow => 'next]>;
    self opcode: 86 name: 'meta_send_op_tequal          params: <['stack => [2, 1],     'args => ['literal],                       'control_flow => 'send]>;
    self opcode: 87 name: 'meta_send_call               params: <['stack => [[1,2], 1], 'args => ['literal, 'count],               'control_flow => 'send]>;

    # More miscellaneous
    self opcode: 88 name: 'push_my_offset               params: <['stack => [0, 1],     'args => ['index],                         'control_flow => 'next]>;
    self opcode: 89 name: 'zsuper                       params: <['stack => [1, 1],     'args => ['literal],                       'control_flow => 'next]>;
    self opcode: 90 name: 'push_block_arg               params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 91 name: 'push_undef                   params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 92 name: 'push_stack_local             params: <['stack => [0, 1],     'args => ['which],                         'control_flow => 'next]>;
    self opcode: 93 name: 'set_stack_local              params: <['stack => [1, 1],     'args => ['which],                         'control_flow => 'next]>;
    self opcode: 94 name: 'push_has_block               params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 95 name: 'push_proc                    params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 96 name: 'check_frozen                 params: <['stack => [1, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 97 name: 'cast_multi_value             params: <['stack => [1, 1],     'args => [],                               'control_flow => 'next]>;
    self opcode: 98 name: 'invoke_primitive             params: <['stack => [[0,2], 1], 'args => ['literal, 'args],                'control_flow => 'next]>;
    self opcode: 99 name: 'push_rubinius                params: <['stack => [0, 1],     'args => [],                               'control_flow => 'next]>;
  }
}

