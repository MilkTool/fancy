#!/usr/bin/env fancy
# -*- fancy -*-
require("rb-readline/readline")

["Welcome to the (still very simple) Fancy REPL",
 "Fancy #{Fancy VERSION}"] println

HISTORY_FILE = File expand_path("~/.fancy_history")
HISTORY = []

ARGV rest each: |file| {
  "LOADING: " ++ file println
  require: file
}

# handle SIGINT
trap("INT") {
  "Quitting." println
  save_history
  System exit
}

Console newline;

def double_or_empty?: line {
  (line =~ /^\s*$/) or: (HISTORY [-2] == line)
}

def load_history {
  if: (File exists?: HISTORY_FILE) then: {
    File open: HISTORY_FILE modes: ['read] with: |f| {
      f readlines each: |l| {
        l = l strip()
        Readline HISTORY <<(l)
        HISTORY << l
      }
    }
  } else: {
    File touch: HISTORY_FILE
  }
}

def save_history {
  puts("saving history")
  unless: @history_saved do: {
    File open: HISTORY_FILE modes: ['write] with: |f| {
      HISTORY last: 100 . each: |l| {
        f writeln: l
      }
    }
    @history_saved = true
  }
}

def Readline completion: block {
  Readline completion_proc=(block)
}

Readline completion_append_character=(" ")
Readline completion: |str| {
  receiver = nil
  end_idx = -2
  methods = []
  3 times: {
    try {
      receiver = Readline line_buffer() split: " " . [[0,end_idx]] . join: " " . eval
      methods = receiver class instance_methods
    } catch Fancy Parser ParseError => e {
      end_idx = end_idx - 1
    } catch Exception => e {
      methods = Object instance_methods
    }
  }

  completions = []
  try {
    regexp = Regexp new(str)
    completions = methods select: @{ =~ regexp } . map: @{ gsub(/^:/, "") }
  } catch RegexpError {
  } finally {
    completions
  }
}

def read_line {
  try {
    return Readline readline(">> ", true)
  } catch ArgumentError {
    return ""
  }
}

load_history

try {
  bnd = binding()

  while: { read_line } do: |line| {
    if: (line =~ /^\s*(exit|quit)\s*$/) then: {
      break
    }

    HISTORY << line
    if: (double_or_empty?: line) then: {
      Readline::HISTORY pop()
      HISTORY pop()
    }

    unless: (line =~ /^\s*$/) do: {
      try {
        Fancy eval: line binding: bnd . inspect println
      } catch Exception => e {
        e message() println
      }
    }
  }
  save_history
} catch Interrupt => e {
  save_history
  System exit
}
