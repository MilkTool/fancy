<bakkdoor> is there documentation on rubinius' vm opcodes?
<bakkdoor> and the overall bytecode file format rubinius uses?
<evan> bakkdoor: there had been, but it's not well maintained. we should fix that.
<evan> you can check out vm/instructions.def
<evan> there is a bunch of inline docs for each opcode there.
<evan> but the .rbc format is largely undocumented still
<evan> there are some ruby classes to read it, which are a kind of documentation.
<bakkdoor> evan: hm ok. having some documentation would really help. i'm planning on porting my language to rubinius :)
<evan> bakkdoor: well, you don't need to worry about the .rbc format probably
<bakkdoor> evan: alright, I'll have a look.
<bakkdoor> evan: but if i want to compile down to rbc I'd need it, or am i missing something?
<evan> you're missing something :D
<bakkdoor> cool :)
<evan> you can write your own .rbc files
<evan> but there is no reason to.
<brixen> bakkdoor: have a look at lib/compiler
<bakkdoor> what would I do then to use rubinius?
<bakkdoor> ok
<evan> the architecture as it stands knows how to write a tree of CompiledMethods to a .rbc file
<brixen> you want to create CompiledMethods
<evan> so you just have to build a tree of CompiledMethods
<bakkdoor> ah ok
<evan> then that is serialized to the .rbc
<brixen> bakkdoor: vm/instructions.def is really good documentation
<evan> I should write a blog post about using the bytecode generator directly
<bakkdoor> brixen: alright, thanks
<evan> which is what you want to do
<brixen> bakkdoor: the few insns that don't have docs in that file are easy to understand
<bakkdoor> evan: that would be cool, yes :)
<brixen> but yes, we need more docs
<bakkdoor> brixen: yeah, in the doc/vm/ directory i found several things that seemed to be outdated
<evan> it's really trivial.
<evan> bakkdoor: yeah, doc/vm is pretty outdated now.
<brixen> bakkdoor: yep, that dir is especially outdated
<evan> we moved faster than I wanted to keep the docs up to date.
<evan> since we're now post 1.0
<evan> it makes sense for me to codify a number of these things.
<slava> hi evan
<brixen> bakkdoor: bin/rbx compile -ABS some_ruby.rb will teach you a lot
<evan> dr. slava.
<bakkdoor> evan: sure, no problem. i always lack behind in documentation as well..
<brixen> bakkdoor: also note the -N option to compile
<brixen> bakkdoor: bin/rbx compile -h
<bakkdoor> brixen: thanks!
<brixen> bakkdoor: write a ruby method that computes what you'd like to compute and look at the bytecode (-B)
<bakkdoor> brixen: yeah, I'll do that
<brixen> bakkdoor: also, note that script bodies and class/module bodies are just methods
<evan> bakkdoor: something to remember
<brixen> bakkdoor: you'll see this plaining in the -B output
<brixen> s/plaining/plainly/
<evan> bakkdoor: the architecture of rubinius makes no assumptions about ruby syntax
<evan> the VM itself doesn't even know how to read ruby code.
<brixen> yes, good point
<bakkdoor> evan: yeah, i guessed it would be that way. which makes sense
<evan> the parser is in an extension
<brixen> syntax is so ephemeral, just ask slava :)
<bakkdoor> :)
<evan> :D
<bakkdoor> true.. 
<brixen> bakkdoor: this is going to be rad, 2 alt langs running on rbx vm by emerg lang conf
<brixen> bakkdoor: we should convince slava to run some Factor on rbx :)
<evan> all our brains work the same, we just choose to use different syntaxs to express the contents of them.
<evan> Rubinius is the same way.
<bakkdoor> brixen: i'll try to get fancy that far, but I can't promise. would rock though :)
<brixen> bakkdoor: I forget, you're in pdx?
<bakkdoor> brixen: yeah, I'll be there from monday till saturday
<brixen> ah ok, but where are you now?
<bakkdoor> brixen: my talk's on thursday
<bakkdoor> brixen: oh, right now i'm in my apartment in osnabr√ºck, germany :)
<brixen> hah, ok, I guess meeting for coffee to work on this is a long shot :)
<brixen> dang
<bakkdoor> yeah.. too bad. but I'll be around in pdx during all of oscon, although I only have a ticket for the 2 days during emerging lang camp
<bakkdoor> but we can meet there as well ;)
<brixen> yep, definitely
<brixen> do you like beer?
<bakkdoor> I'm german. :P
<bakkdoor> of course!
<bakkdoor> :D
<brixen> haha
<brixen> you'll probably be impressed by a few here
<bakkdoor> cool, I always like trying out new beers
<brixen> so, if you look at eg lib/compiler/compiler.rb self.compile, you can see the basic pipeline
<bakkdoor> ok, cool. will do
<slava> I'm looking forward to drinking pdx beer
<brixen> then look at lib/compiler/stages.rb
<brixen> slava: yay!
<brixen> bakkdoor: the compiler is basically: MRI parser -> internal parse tree -> callbacks -> ruby AST -> symbolic bytecode -> encoded bytecode -> .rbc
<brixen> bakkdoor: lib/melbourne/processor.rb contains the methods called to convert the parse tree to the AST
<bakkdoor> brixen: yeah, that's what I also got so far after reading through some docs
<brixen> ok
<bakkdoor> brixen: ok thanks
<brixen> the bytecode(g) method on the AST nodes is probably where you would start
<brixen> since I assume you have your own parser
<BrianRice-work> slava, ping me when you'll be around
<slava> for sure
<brixen> BrianRice-work: totally, we have to all hang out
* brixen is stoked something interesting is in pdx for once
<BrianRice-work> I need to figure out which days to take off of work for OSCON
<BrianRice-work> that's not dominated by stinky hipster nerds... oops, did I say that aloud? ;)
<brixen> haha
<bakkdoor> brixen: yeah I've got a bison parser right now. but I actually wan't to rewrite it in fancy somehow. we'll see. maybe for now sticking to it makes most sense. we'll see
<evan> brixen: looks like we might have broken running .rbc files raw.
<bakkdoor> brixen: but it shouldn't be too hard since my grammar isn't nearly as hard to parse then ruby's ;)
<brixen> evan: yep, needs to check for the ext
<brixen> evan: quick fix in loader.rb to just recognize the file ends in .rbc
<brixen> some ppl don't want .rbc files, some want to run them directly
<brixen> the world is so mixed up...
<brixen> :)
<evan> :D
<evan> can i use load?
<brixen> we could make it recognize .rbc sure
<evan> hm, that doesn't work either.
<brixen> no, directly loading doesn't work atm
<evan> i'm looking for something that works now.
<brixen> I didn't implement it
<evan> lets see...


<evan> bakkdoor: http://gist.github.com/447537
<evan> we need to cleanup the loader situation, but thats easy.
<dbussink> brixen: but i'm going to get some sleep :)
<brixen> dbussink: good plan, night! :)
<bakkdoor> evan: cool, thanks
<evan> bakkdoor: check out lib/compiler/generator.rb for all the methods on g. that you can use to generate bytecode
<bakkdoor> evan: alright :)
<evan> thats the exact same API that our normal compiler uses
<evan> so you can check out lib/compiler/ast/* for examples of driving g
